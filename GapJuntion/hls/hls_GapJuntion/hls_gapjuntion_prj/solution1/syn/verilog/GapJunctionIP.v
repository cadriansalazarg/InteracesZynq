// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="GapJunctionIP,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=76,HLS_SYN_FF=14002,HLS_SYN_LUT=14397,HLS_VERSION=2018_3}" *)

module GapJunctionIP (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_V_data_TDATA,
        input_V_data_TVALID,
        input_V_data_TREADY,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST,
        size,
        FirstRow,
        LastRow
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] input_V_data_TDATA;
input   input_V_data_TVALID;
output   input_V_data_TREADY;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [0:0] output_r_TLAST;
input  [31:0] size;
input  [31:0] FirstRow;
input  [31:0] LastRow;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] input_V_data_0_data_out;
wire    input_V_data_0_vld_in;
wire    input_V_data_0_vld_out;
wire    input_V_data_0_ack_in;
reg    input_V_data_0_ack_out;
reg   [63:0] input_V_data_0_payload_A;
reg   [63:0] input_V_data_0_payload_B;
reg    input_V_data_0_sel_rd;
reg    input_V_data_0_sel_wr;
wire    input_V_data_0_sel;
wire    input_V_data_0_load_A;
wire    input_V_data_0_load_B;
reg   [1:0] input_V_data_0_state;
wire    input_V_data_0_state_cmp_full;
reg   [31:0] output_V_data_1_data_out;
wire    output_V_data_1_vld_in;
wire    output_V_data_1_vld_out;
wire    output_V_data_1_ack_in;
wire    output_V_data_1_ack_out;
reg   [31:0] output_V_data_1_payload_A;
reg   [31:0] output_V_data_1_payload_B;
reg    output_V_data_1_sel_rd;
reg    output_V_data_1_sel_wr;
wire    output_V_data_1_sel;
wire    output_V_data_1_load_A;
wire    output_V_data_1_load_B;
reg   [1:0] output_V_data_1_state;
wire    output_V_data_1_state_cmp_full;
reg   [0:0] output_V_tlast_V_1_data_out;
wire    output_V_tlast_V_1_vld_in;
wire    output_V_tlast_V_1_vld_out;
wire    output_V_tlast_V_1_ack_in;
wire    output_V_tlast_V_1_ack_out;
reg   [0:0] output_V_tlast_V_1_payload_A;
reg   [0:0] output_V_tlast_V_1_payload_B;
reg    output_V_tlast_V_1_sel_rd;
reg    output_V_tlast_V_1_sel_wr;
wire    output_V_tlast_V_1_sel;
wire    output_V_tlast_V_1_load_A;
wire    output_V_tlast_V_1_load_B;
reg   [1:0] output_V_tlast_V_1_state;
wire    output_V_tlast_V_1_state_cmp_full;
reg    ap_block_state1;
wire   [0:0] tmp_4_fu_239_p3;
wire   [26:0] tmp_fu_253_p4;
wire   [26:0] tmp_6_fu_263_p4;
wire   [0:0] tmp_10_fu_284_p3;
wire   [26:0] tmp_8_fu_308_p2;
wire   [26:0] tmp_9_fu_314_p4;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_execute_fu_142_output_r_TDATA;
wire   [0:0] grp_execute_fu_142_output_r_TLAST;
wire   [26:0] grp_execute_fu_142_simConfig_rowBegin_V_2;
wire   [26:0] grp_execute_fu_142_simConfig_rowEnd_V_r;
wire   [26:0] grp_execute_fu_142_simConfig_rowsToSimu;
wire   [26:0] grp_execute_fu_142_simConfig_BLOCK_NUMB;
wire    grp_execute_fu_142_input_V_data_TVALID;
wire    grp_execute_fu_142_input_V_data_TREADY;
wire    grp_execute_fu_142_ap_start;
wire    grp_execute_fu_142_output_r_TVALID;
wire    grp_execute_fu_142_output_r_TREADY;
wire    grp_execute_fu_142_ap_done;
wire    grp_execute_fu_142_ap_ready;
wire    grp_execute_fu_142_ap_idle;
reg    grp_execute_fu_142_ap_continue;
reg    grp_execute_fu_142_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_execute_fu_142_ap_ready;
wire    ap_sync_grp_execute_fu_142_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_execute_fu_142_ap_ready;
reg    ap_sync_reg_grp_execute_fu_142_ap_done;
wire   [31:0] tmp_s_fu_233_p2;
wire   [31:0] p_neg6_fu_247_p2;
wire   [26:0] tmp_5_fu_273_p2;
wire   [31:0] p_neg_fu_292_p2;
wire   [26:0] tmp_7_fu_298_p4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 input_V_data_0_sel_rd = 1'b0;
#0 input_V_data_0_sel_wr = 1'b0;
#0 input_V_data_0_state = 2'd0;
#0 output_V_data_1_sel_rd = 1'b0;
#0 output_V_data_1_sel_wr = 1'b0;
#0 output_V_data_1_state = 2'd0;
#0 output_V_tlast_V_1_sel_rd = 1'b0;
#0 output_V_tlast_V_1_sel_wr = 1'b0;
#0 output_V_tlast_V_1_state = 2'd0;
#0 grp_execute_fu_142_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_execute_fu_142_ap_ready = 1'b0;
#0 ap_sync_reg_grp_execute_fu_142_ap_done = 1'b0;
end

execute grp_execute_fu_142(
    .input_V_data_TDATA(input_V_data_0_data_out),
    .output_r_TDATA(grp_execute_fu_142_output_r_TDATA),
    .output_r_TLAST(grp_execute_fu_142_output_r_TLAST),
    .simConfig_rowBegin_V_2(grp_execute_fu_142_simConfig_rowBegin_V_2),
    .simConfig_rowEnd_V_r(grp_execute_fu_142_simConfig_rowEnd_V_r),
    .simConfig_rowsToSimu(grp_execute_fu_142_simConfig_rowsToSimu),
    .simConfig_BLOCK_NUMB(grp_execute_fu_142_simConfig_BLOCK_NUMB),
    .size(size),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .input_V_data_TVALID(grp_execute_fu_142_input_V_data_TVALID),
    .input_V_data_TREADY(grp_execute_fu_142_input_V_data_TREADY),
    .size_ap_vld(1'b1),
    .simConfig_rowBegin_V_2_ap_vld(1'b1),
    .simConfig_rowEnd_V_r_ap_vld(1'b1),
    .simConfig_rowsToSimu_ap_vld(1'b1),
    .simConfig_BLOCK_NUMB_ap_vld(1'b1),
    .ap_start(grp_execute_fu_142_ap_start),
    .output_r_TVALID(grp_execute_fu_142_output_r_TVALID),
    .output_r_TREADY(grp_execute_fu_142_output_r_TREADY),
    .ap_done(grp_execute_fu_142_ap_done),
    .ap_ready(grp_execute_fu_142_ap_ready),
    .ap_idle(grp_execute_fu_142_ap_idle),
    .ap_continue(grp_execute_fu_142_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((output_V_tlast_V_1_ack_in == 1'b0) | (output_V_data_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_execute_fu_142_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_execute_fu_142_ap_done <= 1'b0;
        end else if ((grp_execute_fu_142_ap_done == 1'b1)) begin
            ap_sync_reg_grp_execute_fu_142_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_execute_fu_142_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_execute_fu_142_ap_ready <= 1'b0;
        end else if ((grp_execute_fu_142_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_execute_fu_142_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_execute_fu_142_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_execute_fu_142_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_execute_fu_142_ap_start_reg <= 1'b1;
        end else if ((grp_execute_fu_142_ap_ready == 1'b1)) begin
            grp_execute_fu_142_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((input_V_data_0_ack_out == 1'b1) & (input_V_data_0_vld_out == 1'b1))) begin
            input_V_data_0_sel_rd <= ~input_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((input_V_data_0_ack_in == 1'b1) & (input_V_data_0_vld_in == 1'b1))) begin
            input_V_data_0_sel_wr <= ~input_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_data_0_state <= 2'd0;
    end else begin
        if ((((input_V_data_0_state == 2'd2) & (input_V_data_0_vld_in == 1'b0)) | ((input_V_data_0_state == 2'd3) & (input_V_data_0_vld_in == 1'b0) & (input_V_data_0_ack_out == 1'b1)))) begin
            input_V_data_0_state <= 2'd2;
        end else if ((((input_V_data_0_state == 2'd1) & (input_V_data_0_ack_out == 1'b0)) | ((input_V_data_0_state == 2'd3) & (input_V_data_0_ack_out == 1'b0) & (input_V_data_0_vld_in == 1'b1)))) begin
            input_V_data_0_state <= 2'd1;
        end else if (((~((input_V_data_0_vld_in == 1'b0) & (input_V_data_0_ack_out == 1'b1)) & ~((input_V_data_0_ack_out == 1'b0) & (input_V_data_0_vld_in == 1'b1)) & (input_V_data_0_state == 2'd3)) | ((input_V_data_0_state == 2'd1) & (input_V_data_0_ack_out == 1'b1)) | ((input_V_data_0_state == 2'd2) & (input_V_data_0_vld_in == 1'b1)))) begin
            input_V_data_0_state <= 2'd3;
        end else begin
            input_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_data_1_ack_out == 1'b1) & (output_V_data_1_vld_out == 1'b1))) begin
            output_V_data_1_sel_rd <= ~output_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_data_1_ack_in == 1'b1) & (output_V_data_1_vld_in == 1'b1))) begin
            output_V_data_1_sel_wr <= ~output_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_data_1_state <= 2'd0;
    end else begin
        if ((((output_V_data_1_state == 2'd2) & (output_V_data_1_vld_in == 1'b0)) | ((output_V_data_1_state == 2'd3) & (output_V_data_1_vld_in == 1'b0) & (output_V_data_1_ack_out == 1'b1)))) begin
            output_V_data_1_state <= 2'd2;
        end else if ((((output_V_data_1_state == 2'd1) & (output_V_data_1_ack_out == 1'b0)) | ((output_V_data_1_state == 2'd3) & (output_V_data_1_ack_out == 1'b0) & (output_V_data_1_vld_in == 1'b1)))) begin
            output_V_data_1_state <= 2'd1;
        end else if (((~((output_V_data_1_vld_in == 1'b0) & (output_V_data_1_ack_out == 1'b1)) & ~((output_V_data_1_ack_out == 1'b0) & (output_V_data_1_vld_in == 1'b1)) & (output_V_data_1_state == 2'd3)) | ((output_V_data_1_state == 2'd1) & (output_V_data_1_ack_out == 1'b1)) | ((output_V_data_1_state == 2'd2) & (output_V_data_1_vld_in == 1'b1)))) begin
            output_V_data_1_state <= 2'd3;
        end else begin
            output_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_tlast_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_tlast_V_1_ack_out == 1'b1) & (output_V_tlast_V_1_vld_out == 1'b1))) begin
            output_V_tlast_V_1_sel_rd <= ~output_V_tlast_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_tlast_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_tlast_V_1_ack_in == 1'b1) & (output_V_tlast_V_1_vld_in == 1'b1))) begin
            output_V_tlast_V_1_sel_wr <= ~output_V_tlast_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_tlast_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_tlast_V_1_state == 2'd2) & (output_V_tlast_V_1_vld_in == 1'b0)) | ((output_V_tlast_V_1_state == 2'd3) & (output_V_tlast_V_1_vld_in == 1'b0) & (output_V_tlast_V_1_ack_out == 1'b1)))) begin
            output_V_tlast_V_1_state <= 2'd2;
        end else if ((((output_V_tlast_V_1_state == 2'd1) & (output_V_tlast_V_1_ack_out == 1'b0)) | ((output_V_tlast_V_1_state == 2'd3) & (output_V_tlast_V_1_ack_out == 1'b0) & (output_V_tlast_V_1_vld_in == 1'b1)))) begin
            output_V_tlast_V_1_state <= 2'd1;
        end else if (((~((output_V_tlast_V_1_vld_in == 1'b0) & (output_V_tlast_V_1_ack_out == 1'b1)) & ~((output_V_tlast_V_1_ack_out == 1'b0) & (output_V_tlast_V_1_vld_in == 1'b1)) & (output_V_tlast_V_1_state == 2'd3)) | ((output_V_tlast_V_1_state == 2'd1) & (output_V_tlast_V_1_ack_out == 1'b1)) | ((output_V_tlast_V_1_state == 2'd2) & (output_V_tlast_V_1_vld_in == 1'b1)))) begin
            output_V_tlast_V_1_state <= 2'd3;
        end else begin
            output_V_tlast_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_data_0_load_A == 1'b1)) begin
        input_V_data_0_payload_A <= input_V_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_V_data_0_load_B == 1'b1)) begin
        input_V_data_0_payload_B <= input_V_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_1_load_A == 1'b1)) begin
        output_V_data_1_payload_A <= grp_execute_fu_142_output_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_1_load_B == 1'b1)) begin
        output_V_data_1_payload_B <= grp_execute_fu_142_output_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_tlast_V_1_load_A == 1'b1)) begin
        output_V_tlast_V_1_payload_A <= grp_execute_fu_142_output_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_tlast_V_1_load_B == 1'b1)) begin
        output_V_tlast_V_1_payload_B <= grp_execute_fu_142_output_r_TLAST;
    end
end

always @ (*) begin
    if ((~((output_V_tlast_V_1_ack_in == 1'b0) | (output_V_data_1_ack_in == 1'b0)) & (output_V_tlast_V_1_state[1'd0] == 1'b0) & (output_V_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_V_tlast_V_1_ack_in == 1'b0) | (output_V_data_1_ack_in == 1'b0)) & (output_V_tlast_V_1_state[1'd0] == 1'b0) & (output_V_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_execute_fu_142_ap_continue = 1'b1;
    end else begin
        grp_execute_fu_142_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_V_data_0_ack_out = grp_execute_fu_142_input_V_data_TREADY;
    end else begin
        input_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_V_data_0_sel == 1'b1)) begin
        input_V_data_0_data_out = input_V_data_0_payload_B;
    end else begin
        input_V_data_0_data_out = input_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((output_V_data_1_sel == 1'b1)) begin
        output_V_data_1_data_out = output_V_data_1_payload_B;
    end else begin
        output_V_data_1_data_out = output_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((output_V_tlast_V_1_sel == 1'b1)) begin
        output_V_tlast_V_1_data_out = output_V_tlast_V_1_payload_B;
    end else begin
        output_V_tlast_V_1_data_out = output_V_tlast_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((output_V_tlast_V_1_ack_in == 1'b0) | (output_V_data_1_ack_in == 1'b0)) & (output_V_tlast_V_1_state[1'd0] == 1'b0) & (output_V_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_execute_fu_142_ap_ready & ap_sync_grp_execute_fu_142_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state5 = ((output_V_tlast_V_1_ack_in == 1'b0) | (output_V_data_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_execute_fu_142_ap_done = (grp_execute_fu_142_ap_done | ap_sync_reg_grp_execute_fu_142_ap_done);

assign ap_sync_grp_execute_fu_142_ap_ready = (grp_execute_fu_142_ap_ready | ap_sync_reg_grp_execute_fu_142_ap_ready);

assign grp_execute_fu_142_ap_start = grp_execute_fu_142_ap_start_reg;

assign grp_execute_fu_142_input_V_data_TVALID = input_V_data_0_state[1'd0];

assign grp_execute_fu_142_output_r_TREADY = ((output_V_tlast_V_1_ack_in & ap_CS_fsm_state4) | (output_V_data_1_ack_in & ap_CS_fsm_state4));

assign grp_execute_fu_142_simConfig_BLOCK_NUMB = ((tmp_10_fu_284_p3[0:0] === 1'b1) ? tmp_8_fu_308_p2 : tmp_9_fu_314_p4);

assign grp_execute_fu_142_simConfig_rowBegin_V_2 = FirstRow[26:0];

assign grp_execute_fu_142_simConfig_rowEnd_V_r = LastRow[26:0];

assign grp_execute_fu_142_simConfig_rowsToSimu = ((tmp_4_fu_239_p3[0:0] === 1'b1) ? tmp_5_fu_273_p2 : tmp_6_fu_263_p4);

assign input_V_data_0_ack_in = input_V_data_0_state[1'd1];

assign input_V_data_0_load_A = (input_V_data_0_state_cmp_full & ~input_V_data_0_sel_wr);

assign input_V_data_0_load_B = (input_V_data_0_state_cmp_full & input_V_data_0_sel_wr);

assign input_V_data_0_sel = input_V_data_0_sel_rd;

assign input_V_data_0_state_cmp_full = ((input_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_V_data_0_vld_in = input_V_data_TVALID;

assign input_V_data_0_vld_out = input_V_data_0_state[1'd0];

assign input_V_data_TREADY = input_V_data_0_state[1'd1];

assign output_V_data_1_ack_in = output_V_data_1_state[1'd1];

assign output_V_data_1_ack_out = output_r_TREADY;

assign output_V_data_1_load_A = (output_V_data_1_state_cmp_full & ~output_V_data_1_sel_wr);

assign output_V_data_1_load_B = (output_V_data_1_state_cmp_full & output_V_data_1_sel_wr);

assign output_V_data_1_sel = output_V_data_1_sel_rd;

assign output_V_data_1_state_cmp_full = ((output_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_data_1_vld_in = grp_execute_fu_142_output_r_TVALID;

assign output_V_data_1_vld_out = output_V_data_1_state[1'd0];

assign output_V_tlast_V_1_ack_in = output_V_tlast_V_1_state[1'd1];

assign output_V_tlast_V_1_ack_out = output_r_TREADY;

assign output_V_tlast_V_1_load_A = (output_V_tlast_V_1_state_cmp_full & ~output_V_tlast_V_1_sel_wr);

assign output_V_tlast_V_1_load_B = (output_V_tlast_V_1_state_cmp_full & output_V_tlast_V_1_sel_wr);

assign output_V_tlast_V_1_sel = output_V_tlast_V_1_sel_rd;

assign output_V_tlast_V_1_state_cmp_full = ((output_V_tlast_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_tlast_V_1_vld_in = grp_execute_fu_142_output_r_TVALID;

assign output_V_tlast_V_1_vld_out = output_V_tlast_V_1_state[1'd0];

assign output_r_TDATA = output_V_data_1_data_out;

assign output_r_TLAST = output_V_tlast_V_1_data_out;

assign output_r_TVALID = output_V_tlast_V_1_state[1'd0];

assign p_neg6_fu_247_p2 = (32'd0 - tmp_s_fu_233_p2);

assign p_neg_fu_292_p2 = (32'd0 - size);

assign tmp_10_fu_284_p3 = size[32'd31];

assign tmp_4_fu_239_p3 = tmp_s_fu_233_p2[32'd31];

assign tmp_5_fu_273_p2 = (27'd0 - tmp_fu_253_p4);

assign tmp_6_fu_263_p4 = {{tmp_s_fu_233_p2[28:2]}};

assign tmp_7_fu_298_p4 = {{p_neg_fu_292_p2[28:2]}};

assign tmp_8_fu_308_p2 = (27'd0 - tmp_7_fu_298_p4);

assign tmp_9_fu_314_p4 = {{size[28:2]}};

assign tmp_fu_253_p4 = {{p_neg6_fu_247_p2[28:2]}};

assign tmp_s_fu_233_p2 = (LastRow - FirstRow);

endmodule //GapJunctionIP
