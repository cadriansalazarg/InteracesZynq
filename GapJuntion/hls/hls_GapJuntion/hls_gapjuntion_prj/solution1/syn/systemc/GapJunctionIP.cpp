// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "GapJunctionIP.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic GapJunctionIP::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic GapJunctionIP::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> GapJunctionIP::ap_ST_fsm_state1 = "1";
const sc_lv<5> GapJunctionIP::ap_ST_fsm_state2 = "10";
const sc_lv<5> GapJunctionIP::ap_ST_fsm_state3 = "100";
const sc_lv<5> GapJunctionIP::ap_ST_fsm_state4 = "1000";
const sc_lv<5> GapJunctionIP::ap_ST_fsm_state5 = "10000";
const sc_lv<32> GapJunctionIP::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> GapJunctionIP::ap_const_lv1_0 = "0";
const sc_lv<1> GapJunctionIP::ap_const_lv1_1 = "1";
const sc_lv<2> GapJunctionIP::ap_const_lv2_0 = "00";
const sc_lv<2> GapJunctionIP::ap_const_lv2_2 = "10";
const sc_lv<2> GapJunctionIP::ap_const_lv2_3 = "11";
const sc_lv<2> GapJunctionIP::ap_const_lv2_1 = "1";
const sc_lv<32> GapJunctionIP::ap_const_lv32_2 = "10";
const sc_lv<32> GapJunctionIP::ap_const_lv32_3 = "11";
const bool GapJunctionIP::ap_const_boolean_0 = false;
const sc_lv<32> GapJunctionIP::ap_const_lv32_1F = "11111";
const sc_lv<32> GapJunctionIP::ap_const_lv32_1C = "11100";
const sc_lv<27> GapJunctionIP::ap_const_lv27_0 = "000000000000000000000000000";
const sc_lv<32> GapJunctionIP::ap_const_lv32_4 = "100";
const bool GapJunctionIP::ap_const_boolean_1 = true;

GapJunctionIP::GapJunctionIP(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_execute_fu_142 = new execute("grp_execute_fu_142");
    grp_execute_fu_142->input_V_data_TDATA(input_V_data_0_data_out);
    grp_execute_fu_142->output_r_TDATA(grp_execute_fu_142_output_r_TDATA);
    grp_execute_fu_142->output_r_TLAST(grp_execute_fu_142_output_r_TLAST);
    grp_execute_fu_142->simConfig_rowBegin_V_2(grp_execute_fu_142_simConfig_rowBegin_V_2);
    grp_execute_fu_142->simConfig_rowEnd_V_r(grp_execute_fu_142_simConfig_rowEnd_V_r);
    grp_execute_fu_142->simConfig_rowsToSimu(grp_execute_fu_142_simConfig_rowsToSimu);
    grp_execute_fu_142->simConfig_BLOCK_NUMB(grp_execute_fu_142_simConfig_BLOCK_NUMB);
    grp_execute_fu_142->size(size);
    grp_execute_fu_142->ap_clk(ap_clk);
    grp_execute_fu_142->ap_rst(ap_rst_n_inv);
    grp_execute_fu_142->input_V_data_TVALID(grp_execute_fu_142_input_V_data_TVALID);
    grp_execute_fu_142->input_V_data_TREADY(grp_execute_fu_142_input_V_data_TREADY);
    grp_execute_fu_142->size_ap_vld(ap_var_for_const0);
    grp_execute_fu_142->simConfig_rowBegin_V_2_ap_vld(ap_var_for_const0);
    grp_execute_fu_142->simConfig_rowEnd_V_r_ap_vld(ap_var_for_const0);
    grp_execute_fu_142->simConfig_rowsToSimu_ap_vld(ap_var_for_const0);
    grp_execute_fu_142->simConfig_BLOCK_NUMB_ap_vld(ap_var_for_const0);
    grp_execute_fu_142->ap_start(grp_execute_fu_142_ap_start);
    grp_execute_fu_142->output_r_TVALID(grp_execute_fu_142_output_r_TVALID);
    grp_execute_fu_142->output_r_TREADY(grp_execute_fu_142_output_r_TREADY);
    grp_execute_fu_142->ap_done(grp_execute_fu_142_ap_done);
    grp_execute_fu_142->ap_ready(grp_execute_fu_142_ap_ready);
    grp_execute_fu_142->ap_idle(grp_execute_fu_142_ap_idle);
    grp_execute_fu_142->ap_continue(grp_execute_fu_142_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state4_on_subcall_done);
    sensitive << ( ap_sync_grp_execute_fu_142_ap_ready );
    sensitive << ( ap_sync_grp_execute_fu_142_ap_done );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( output_V_data_1_ack_in );
    sensitive << ( output_V_tlast_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( output_V_data_1_ack_in );
    sensitive << ( output_V_data_1_state );
    sensitive << ( output_V_tlast_V_1_ack_in );
    sensitive << ( output_V_tlast_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( output_V_data_1_ack_in );
    sensitive << ( output_V_data_1_state );
    sensitive << ( output_V_tlast_V_1_ack_in );
    sensitive << ( output_V_tlast_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_execute_fu_142_ap_done);
    sensitive << ( grp_execute_fu_142_ap_done );
    sensitive << ( ap_sync_reg_grp_execute_fu_142_ap_done );

    SC_METHOD(thread_ap_sync_grp_execute_fu_142_ap_ready);
    sensitive << ( grp_execute_fu_142_ap_ready );
    sensitive << ( ap_sync_reg_grp_execute_fu_142_ap_ready );

    SC_METHOD(thread_grp_execute_fu_142_ap_continue);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );

    SC_METHOD(thread_grp_execute_fu_142_ap_start);
    sensitive << ( grp_execute_fu_142_ap_start_reg );

    SC_METHOD(thread_grp_execute_fu_142_input_V_data_TVALID);
    sensitive << ( input_V_data_0_state );

    SC_METHOD(thread_grp_execute_fu_142_output_r_TREADY);
    sensitive << ( output_V_data_1_ack_in );
    sensitive << ( output_V_tlast_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_execute_fu_142_simConfig_BLOCK_NUMB);
    sensitive << ( tmp_10_fu_284_p3 );
    sensitive << ( tmp_8_fu_308_p2 );
    sensitive << ( tmp_9_fu_314_p4 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_execute_fu_142_simConfig_rowBegin_V_2);
    sensitive << ( FirstRow );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_execute_fu_142_simConfig_rowEnd_V_r);
    sensitive << ( LastRow );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_execute_fu_142_simConfig_rowsToSimu);
    sensitive << ( tmp_4_fu_239_p3 );
    sensitive << ( tmp_6_fu_263_p4 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_5_fu_273_p2 );

    SC_METHOD(thread_input_V_data_0_ack_in);
    sensitive << ( input_V_data_0_state );

    SC_METHOD(thread_input_V_data_0_ack_out);
    sensitive << ( grp_execute_fu_142_input_V_data_TREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_input_V_data_0_data_out);
    sensitive << ( input_V_data_0_payload_A );
    sensitive << ( input_V_data_0_payload_B );
    sensitive << ( input_V_data_0_sel );

    SC_METHOD(thread_input_V_data_0_load_A);
    sensitive << ( input_V_data_0_sel_wr );
    sensitive << ( input_V_data_0_state_cmp_full );

    SC_METHOD(thread_input_V_data_0_load_B);
    sensitive << ( input_V_data_0_sel_wr );
    sensitive << ( input_V_data_0_state_cmp_full );

    SC_METHOD(thread_input_V_data_0_sel);
    sensitive << ( input_V_data_0_sel_rd );

    SC_METHOD(thread_input_V_data_0_state_cmp_full);
    sensitive << ( input_V_data_0_state );

    SC_METHOD(thread_input_V_data_0_vld_in);
    sensitive << ( input_V_data_TVALID );

    SC_METHOD(thread_input_V_data_0_vld_out);
    sensitive << ( input_V_data_0_state );

    SC_METHOD(thread_input_V_data_TREADY);
    sensitive << ( input_V_data_0_state );

    SC_METHOD(thread_output_V_data_1_ack_in);
    sensitive << ( output_V_data_1_state );

    SC_METHOD(thread_output_V_data_1_ack_out);
    sensitive << ( output_r_TREADY );

    SC_METHOD(thread_output_V_data_1_data_out);
    sensitive << ( output_V_data_1_payload_A );
    sensitive << ( output_V_data_1_payload_B );
    sensitive << ( output_V_data_1_sel );

    SC_METHOD(thread_output_V_data_1_load_A);
    sensitive << ( output_V_data_1_sel_wr );
    sensitive << ( output_V_data_1_state_cmp_full );

    SC_METHOD(thread_output_V_data_1_load_B);
    sensitive << ( output_V_data_1_sel_wr );
    sensitive << ( output_V_data_1_state_cmp_full );

    SC_METHOD(thread_output_V_data_1_sel);
    sensitive << ( output_V_data_1_sel_rd );

    SC_METHOD(thread_output_V_data_1_state_cmp_full);
    sensitive << ( output_V_data_1_state );

    SC_METHOD(thread_output_V_data_1_vld_in);
    sensitive << ( grp_execute_fu_142_output_r_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_V_data_1_vld_out);
    sensitive << ( output_V_data_1_state );

    SC_METHOD(thread_output_V_tlast_V_1_ack_in);
    sensitive << ( output_V_tlast_V_1_state );

    SC_METHOD(thread_output_V_tlast_V_1_ack_out);
    sensitive << ( output_r_TREADY );

    SC_METHOD(thread_output_V_tlast_V_1_data_out);
    sensitive << ( output_V_tlast_V_1_payload_A );
    sensitive << ( output_V_tlast_V_1_payload_B );
    sensitive << ( output_V_tlast_V_1_sel );

    SC_METHOD(thread_output_V_tlast_V_1_load_A);
    sensitive << ( output_V_tlast_V_1_sel_wr );
    sensitive << ( output_V_tlast_V_1_state_cmp_full );

    SC_METHOD(thread_output_V_tlast_V_1_load_B);
    sensitive << ( output_V_tlast_V_1_sel_wr );
    sensitive << ( output_V_tlast_V_1_state_cmp_full );

    SC_METHOD(thread_output_V_tlast_V_1_sel);
    sensitive << ( output_V_tlast_V_1_sel_rd );

    SC_METHOD(thread_output_V_tlast_V_1_state_cmp_full);
    sensitive << ( output_V_tlast_V_1_state );

    SC_METHOD(thread_output_V_tlast_V_1_vld_in);
    sensitive << ( grp_execute_fu_142_output_r_TVALID );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_V_tlast_V_1_vld_out);
    sensitive << ( output_V_tlast_V_1_state );

    SC_METHOD(thread_output_r_TDATA);
    sensitive << ( output_V_data_1_data_out );

    SC_METHOD(thread_output_r_TLAST);
    sensitive << ( output_V_tlast_V_1_data_out );

    SC_METHOD(thread_output_r_TVALID);
    sensitive << ( output_V_tlast_V_1_state );

    SC_METHOD(thread_p_neg6_fu_247_p2);
    sensitive << ( tmp_s_fu_233_p2 );

    SC_METHOD(thread_p_neg_fu_292_p2);
    sensitive << ( size );

    SC_METHOD(thread_tmp_10_fu_284_p3);
    sensitive << ( size );

    SC_METHOD(thread_tmp_4_fu_239_p3);
    sensitive << ( tmp_s_fu_233_p2 );

    SC_METHOD(thread_tmp_5_fu_273_p2);
    sensitive << ( tmp_fu_253_p4 );

    SC_METHOD(thread_tmp_6_fu_263_p4);
    sensitive << ( tmp_s_fu_233_p2 );

    SC_METHOD(thread_tmp_7_fu_298_p4);
    sensitive << ( p_neg_fu_292_p2 );

    SC_METHOD(thread_tmp_8_fu_308_p2);
    sensitive << ( tmp_7_fu_298_p4 );

    SC_METHOD(thread_tmp_9_fu_314_p4);
    sensitive << ( size );

    SC_METHOD(thread_tmp_fu_253_p4);
    sensitive << ( p_neg6_fu_247_p2 );

    SC_METHOD(thread_tmp_s_fu_233_p2);
    sensitive << ( FirstRow );
    sensitive << ( LastRow );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_data_1_ack_in );
    sensitive << ( output_V_data_1_state );
    sensitive << ( output_V_tlast_V_1_ack_in );
    sensitive << ( output_V_tlast_V_1_state );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state4_on_subcall_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    input_V_data_0_sel_rd = SC_LOGIC_0;
    input_V_data_0_sel_wr = SC_LOGIC_0;
    input_V_data_0_state = "00";
    output_V_data_1_sel_rd = SC_LOGIC_0;
    output_V_data_1_sel_wr = SC_LOGIC_0;
    output_V_data_1_state = "00";
    output_V_tlast_V_1_sel_rd = SC_LOGIC_0;
    output_V_tlast_V_1_sel_wr = SC_LOGIC_0;
    output_V_tlast_V_1_state = "00";
    grp_execute_fu_142_ap_start_reg = SC_LOGIC_0;
    ap_sync_reg_grp_execute_fu_142_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_execute_fu_142_ap_done = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "GapJunctionIP_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_data_TDATA, "(port)input_V_data_TDATA");
    sc_trace(mVcdFile, input_V_data_TVALID, "(port)input_V_data_TVALID");
    sc_trace(mVcdFile, input_V_data_TREADY, "(port)input_V_data_TREADY");
    sc_trace(mVcdFile, output_r_TDATA, "(port)output_r_TDATA");
    sc_trace(mVcdFile, output_r_TVALID, "(port)output_r_TVALID");
    sc_trace(mVcdFile, output_r_TREADY, "(port)output_r_TREADY");
    sc_trace(mVcdFile, output_r_TLAST, "(port)output_r_TLAST");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, FirstRow, "(port)FirstRow");
    sc_trace(mVcdFile, LastRow, "(port)LastRow");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_V_data_0_data_out, "input_V_data_0_data_out");
    sc_trace(mVcdFile, input_V_data_0_vld_in, "input_V_data_0_vld_in");
    sc_trace(mVcdFile, input_V_data_0_vld_out, "input_V_data_0_vld_out");
    sc_trace(mVcdFile, input_V_data_0_ack_in, "input_V_data_0_ack_in");
    sc_trace(mVcdFile, input_V_data_0_ack_out, "input_V_data_0_ack_out");
    sc_trace(mVcdFile, input_V_data_0_payload_A, "input_V_data_0_payload_A");
    sc_trace(mVcdFile, input_V_data_0_payload_B, "input_V_data_0_payload_B");
    sc_trace(mVcdFile, input_V_data_0_sel_rd, "input_V_data_0_sel_rd");
    sc_trace(mVcdFile, input_V_data_0_sel_wr, "input_V_data_0_sel_wr");
    sc_trace(mVcdFile, input_V_data_0_sel, "input_V_data_0_sel");
    sc_trace(mVcdFile, input_V_data_0_load_A, "input_V_data_0_load_A");
    sc_trace(mVcdFile, input_V_data_0_load_B, "input_V_data_0_load_B");
    sc_trace(mVcdFile, input_V_data_0_state, "input_V_data_0_state");
    sc_trace(mVcdFile, input_V_data_0_state_cmp_full, "input_V_data_0_state_cmp_full");
    sc_trace(mVcdFile, output_V_data_1_data_out, "output_V_data_1_data_out");
    sc_trace(mVcdFile, output_V_data_1_vld_in, "output_V_data_1_vld_in");
    sc_trace(mVcdFile, output_V_data_1_vld_out, "output_V_data_1_vld_out");
    sc_trace(mVcdFile, output_V_data_1_ack_in, "output_V_data_1_ack_in");
    sc_trace(mVcdFile, output_V_data_1_ack_out, "output_V_data_1_ack_out");
    sc_trace(mVcdFile, output_V_data_1_payload_A, "output_V_data_1_payload_A");
    sc_trace(mVcdFile, output_V_data_1_payload_B, "output_V_data_1_payload_B");
    sc_trace(mVcdFile, output_V_data_1_sel_rd, "output_V_data_1_sel_rd");
    sc_trace(mVcdFile, output_V_data_1_sel_wr, "output_V_data_1_sel_wr");
    sc_trace(mVcdFile, output_V_data_1_sel, "output_V_data_1_sel");
    sc_trace(mVcdFile, output_V_data_1_load_A, "output_V_data_1_load_A");
    sc_trace(mVcdFile, output_V_data_1_load_B, "output_V_data_1_load_B");
    sc_trace(mVcdFile, output_V_data_1_state, "output_V_data_1_state");
    sc_trace(mVcdFile, output_V_data_1_state_cmp_full, "output_V_data_1_state_cmp_full");
    sc_trace(mVcdFile, output_V_tlast_V_1_data_out, "output_V_tlast_V_1_data_out");
    sc_trace(mVcdFile, output_V_tlast_V_1_vld_in, "output_V_tlast_V_1_vld_in");
    sc_trace(mVcdFile, output_V_tlast_V_1_vld_out, "output_V_tlast_V_1_vld_out");
    sc_trace(mVcdFile, output_V_tlast_V_1_ack_in, "output_V_tlast_V_1_ack_in");
    sc_trace(mVcdFile, output_V_tlast_V_1_ack_out, "output_V_tlast_V_1_ack_out");
    sc_trace(mVcdFile, output_V_tlast_V_1_payload_A, "output_V_tlast_V_1_payload_A");
    sc_trace(mVcdFile, output_V_tlast_V_1_payload_B, "output_V_tlast_V_1_payload_B");
    sc_trace(mVcdFile, output_V_tlast_V_1_sel_rd, "output_V_tlast_V_1_sel_rd");
    sc_trace(mVcdFile, output_V_tlast_V_1_sel_wr, "output_V_tlast_V_1_sel_wr");
    sc_trace(mVcdFile, output_V_tlast_V_1_sel, "output_V_tlast_V_1_sel");
    sc_trace(mVcdFile, output_V_tlast_V_1_load_A, "output_V_tlast_V_1_load_A");
    sc_trace(mVcdFile, output_V_tlast_V_1_load_B, "output_V_tlast_V_1_load_B");
    sc_trace(mVcdFile, output_V_tlast_V_1_state, "output_V_tlast_V_1_state");
    sc_trace(mVcdFile, output_V_tlast_V_1_state_cmp_full, "output_V_tlast_V_1_state_cmp_full");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_4_fu_239_p3, "tmp_4_fu_239_p3");
    sc_trace(mVcdFile, tmp_fu_253_p4, "tmp_fu_253_p4");
    sc_trace(mVcdFile, tmp_6_fu_263_p4, "tmp_6_fu_263_p4");
    sc_trace(mVcdFile, tmp_10_fu_284_p3, "tmp_10_fu_284_p3");
    sc_trace(mVcdFile, tmp_8_fu_308_p2, "tmp_8_fu_308_p2");
    sc_trace(mVcdFile, tmp_9_fu_314_p4, "tmp_9_fu_314_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_execute_fu_142_output_r_TDATA, "grp_execute_fu_142_output_r_TDATA");
    sc_trace(mVcdFile, grp_execute_fu_142_output_r_TLAST, "grp_execute_fu_142_output_r_TLAST");
    sc_trace(mVcdFile, grp_execute_fu_142_simConfig_rowBegin_V_2, "grp_execute_fu_142_simConfig_rowBegin_V_2");
    sc_trace(mVcdFile, grp_execute_fu_142_simConfig_rowEnd_V_r, "grp_execute_fu_142_simConfig_rowEnd_V_r");
    sc_trace(mVcdFile, grp_execute_fu_142_simConfig_rowsToSimu, "grp_execute_fu_142_simConfig_rowsToSimu");
    sc_trace(mVcdFile, grp_execute_fu_142_simConfig_BLOCK_NUMB, "grp_execute_fu_142_simConfig_BLOCK_NUMB");
    sc_trace(mVcdFile, grp_execute_fu_142_input_V_data_TVALID, "grp_execute_fu_142_input_V_data_TVALID");
    sc_trace(mVcdFile, grp_execute_fu_142_input_V_data_TREADY, "grp_execute_fu_142_input_V_data_TREADY");
    sc_trace(mVcdFile, grp_execute_fu_142_ap_start, "grp_execute_fu_142_ap_start");
    sc_trace(mVcdFile, grp_execute_fu_142_output_r_TVALID, "grp_execute_fu_142_output_r_TVALID");
    sc_trace(mVcdFile, grp_execute_fu_142_output_r_TREADY, "grp_execute_fu_142_output_r_TREADY");
    sc_trace(mVcdFile, grp_execute_fu_142_ap_done, "grp_execute_fu_142_ap_done");
    sc_trace(mVcdFile, grp_execute_fu_142_ap_ready, "grp_execute_fu_142_ap_ready");
    sc_trace(mVcdFile, grp_execute_fu_142_ap_idle, "grp_execute_fu_142_ap_idle");
    sc_trace(mVcdFile, grp_execute_fu_142_ap_continue, "grp_execute_fu_142_ap_continue");
    sc_trace(mVcdFile, grp_execute_fu_142_ap_start_reg, "grp_execute_fu_142_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_sync_grp_execute_fu_142_ap_ready, "ap_sync_grp_execute_fu_142_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_execute_fu_142_ap_done, "ap_sync_grp_execute_fu_142_ap_done");
    sc_trace(mVcdFile, ap_block_state4_on_subcall_done, "ap_block_state4_on_subcall_done");
    sc_trace(mVcdFile, ap_sync_reg_grp_execute_fu_142_ap_ready, "ap_sync_reg_grp_execute_fu_142_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_execute_fu_142_ap_done, "ap_sync_reg_grp_execute_fu_142_ap_done");
    sc_trace(mVcdFile, tmp_s_fu_233_p2, "tmp_s_fu_233_p2");
    sc_trace(mVcdFile, p_neg6_fu_247_p2, "p_neg6_fu_247_p2");
    sc_trace(mVcdFile, tmp_5_fu_273_p2, "tmp_5_fu_273_p2");
    sc_trace(mVcdFile, p_neg_fu_292_p2, "p_neg_fu_292_p2");
    sc_trace(mVcdFile, tmp_7_fu_298_p4, "tmp_7_fu_298_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("GapJunctionIP.hdltvin.dat");
    mHdltvoutHandle.open("GapJunctionIP.hdltvout.dat");
}

GapJunctionIP::~GapJunctionIP() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_execute_fu_142;
}

void GapJunctionIP::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void GapJunctionIP::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_execute_fu_142_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_execute_fu_142_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_execute_fu_142_ap_done.read())) {
            ap_sync_reg_grp_execute_fu_142_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_execute_fu_142_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_execute_fu_142_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_execute_fu_142_ap_ready.read())) {
            ap_sync_reg_grp_execute_fu_142_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_execute_fu_142_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_execute_fu_142_ap_ready.read())))) {
            grp_execute_fu_142_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_execute_fu_142_ap_ready.read())) {
            grp_execute_fu_142_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_V_data_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_vld_out.read()))) {
            input_V_data_0_sel_rd =  (sc_logic) (~input_V_data_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_V_data_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_ack_in.read()))) {
            input_V_data_0_sel_wr =  (sc_logic) (~input_V_data_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_V_data_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_V_data_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_ack_out.read()) && 
              esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_V_data_0_vld_in.read()) && 
              esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_2)))) {
            input_V_data_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_1)))) {
            input_V_data_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(input_V_data_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_V_data_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_ack_out.read()))))) {
            input_V_data_0_state = ap_const_lv2_3;
        } else {
            input_V_data_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_vld_out.read()))) {
            output_V_data_1_sel_rd =  (sc_logic) (~output_V_data_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_ack_in.read()))) {
            output_V_data_1_sel_wr =  (sc_logic) (~output_V_data_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_V_data_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_V_data_1_state.read())))) {
            output_V_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_V_data_1_state.read())))) {
            output_V_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_V_data_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_V_data_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_ack_out.read()))))) {
            output_V_data_1_state = ap_const_lv2_3;
        } else {
            output_V_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_tlast_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_vld_out.read()))) {
            output_V_tlast_V_1_sel_rd =  (sc_logic) (~output_V_tlast_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_tlast_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_ack_in.read()))) {
            output_V_tlast_V_1_sel_wr =  (sc_logic) (~output_V_tlast_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_tlast_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_V_tlast_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_V_tlast_V_1_state.read())))) {
            output_V_tlast_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_V_tlast_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_V_tlast_V_1_state.read())))) {
            output_V_tlast_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_V_tlast_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_V_tlast_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_V_tlast_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_ack_out.read()))))) {
            output_V_tlast_V_1_state = ap_const_lv2_3;
        } else {
            output_V_tlast_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_load_A.read())) {
        input_V_data_0_payload_A = input_V_data_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_load_B.read())) {
        input_V_data_0_payload_B = input_V_data_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_load_A.read())) {
        output_V_data_1_payload_A = grp_execute_fu_142_output_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_load_B.read())) {
        output_V_data_1_payload_B = grp_execute_fu_142_output_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_load_A.read())) {
        output_V_tlast_V_1_payload_A = grp_execute_fu_142_output_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_load_B.read())) {
        output_V_tlast_V_1_payload_B = grp_execute_fu_142_output_r_TLAST.read();
    }
}

void GapJunctionIP::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void GapJunctionIP::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void GapJunctionIP::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void GapJunctionIP::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void GapJunctionIP::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void GapJunctionIP::thread_ap_block_state4_on_subcall_done() {
    ap_block_state4_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_execute_fu_142_ap_ready.read() & ap_sync_grp_execute_fu_142_ap_done.read()));
}

void GapJunctionIP::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_in.read()));
}

void GapJunctionIP::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_state.read()[0]))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void GapJunctionIP::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void GapJunctionIP::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_state.read()[0]))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void GapJunctionIP::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void GapJunctionIP::thread_ap_sync_grp_execute_fu_142_ap_done() {
    ap_sync_grp_execute_fu_142_ap_done = (grp_execute_fu_142_ap_done.read() | ap_sync_reg_grp_execute_fu_142_ap_done.read());
}

void GapJunctionIP::thread_ap_sync_grp_execute_fu_142_ap_ready() {
    ap_sync_grp_execute_fu_142_ap_ready = (grp_execute_fu_142_ap_ready.read() | ap_sync_reg_grp_execute_fu_142_ap_ready.read());
}

void GapJunctionIP::thread_grp_execute_fu_142_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_execute_fu_142_ap_continue = ap_const_logic_1;
    } else {
        grp_execute_fu_142_ap_continue = ap_const_logic_0;
    }
}

void GapJunctionIP::thread_grp_execute_fu_142_ap_start() {
    grp_execute_fu_142_ap_start = grp_execute_fu_142_ap_start_reg.read();
}

void GapJunctionIP::thread_grp_execute_fu_142_input_V_data_TVALID() {
    grp_execute_fu_142_input_V_data_TVALID = input_V_data_0_state.read()[0];
}

void GapJunctionIP::thread_grp_execute_fu_142_output_r_TREADY() {
    grp_execute_fu_142_output_r_TREADY = ((output_V_data_1_ack_in.read() & 
  ap_CS_fsm_state4.read()) | (output_V_tlast_V_1_ack_in.read() & 
  ap_CS_fsm_state4.read()));
}

void GapJunctionIP::thread_grp_execute_fu_142_simConfig_BLOCK_NUMB() {
    grp_execute_fu_142_simConfig_BLOCK_NUMB = (!tmp_10_fu_284_p3.read()[0].is_01())? sc_lv<27>(): ((tmp_10_fu_284_p3.read()[0].to_bool())? tmp_8_fu_308_p2.read(): tmp_9_fu_314_p4.read());
}

void GapJunctionIP::thread_grp_execute_fu_142_simConfig_rowBegin_V_2() {
    grp_execute_fu_142_simConfig_rowBegin_V_2 = FirstRow.read().range(27-1, 0);
}

void GapJunctionIP::thread_grp_execute_fu_142_simConfig_rowEnd_V_r() {
    grp_execute_fu_142_simConfig_rowEnd_V_r = LastRow.read().range(27-1, 0);
}

void GapJunctionIP::thread_grp_execute_fu_142_simConfig_rowsToSimu() {
    grp_execute_fu_142_simConfig_rowsToSimu = (!tmp_4_fu_239_p3.read()[0].is_01())? sc_lv<27>(): ((tmp_4_fu_239_p3.read()[0].to_bool())? tmp_5_fu_273_p2.read(): tmp_6_fu_263_p4.read());
}

void GapJunctionIP::thread_input_V_data_0_ack_in() {
    input_V_data_0_ack_in = input_V_data_0_state.read()[1];
}

void GapJunctionIP::thread_input_V_data_0_ack_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_V_data_0_ack_out = grp_execute_fu_142_input_V_data_TREADY.read();
    } else {
        input_V_data_0_ack_out = ap_const_logic_0;
    }
}

void GapJunctionIP::thread_input_V_data_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, input_V_data_0_sel.read())) {
        input_V_data_0_data_out = input_V_data_0_payload_B.read();
    } else {
        input_V_data_0_data_out = input_V_data_0_payload_A.read();
    }
}

void GapJunctionIP::thread_input_V_data_0_load_A() {
    input_V_data_0_load_A = (input_V_data_0_state_cmp_full.read() & ~input_V_data_0_sel_wr.read());
}

void GapJunctionIP::thread_input_V_data_0_load_B() {
    input_V_data_0_load_B = (input_V_data_0_sel_wr.read() & input_V_data_0_state_cmp_full.read());
}

void GapJunctionIP::thread_input_V_data_0_sel() {
    input_V_data_0_sel = input_V_data_0_sel_rd.read();
}

void GapJunctionIP::thread_input_V_data_0_state_cmp_full() {
    input_V_data_0_state_cmp_full =  (sc_logic) ((!input_V_data_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(input_V_data_0_state.read() != ap_const_lv2_1))[0];
}

void GapJunctionIP::thread_input_V_data_0_vld_in() {
    input_V_data_0_vld_in = input_V_data_TVALID.read();
}

void GapJunctionIP::thread_input_V_data_0_vld_out() {
    input_V_data_0_vld_out = input_V_data_0_state.read()[0];
}

void GapJunctionIP::thread_input_V_data_TREADY() {
    input_V_data_TREADY = input_V_data_0_state.read()[1];
}

void GapJunctionIP::thread_output_V_data_1_ack_in() {
    output_V_data_1_ack_in = output_V_data_1_state.read()[1];
}

void GapJunctionIP::thread_output_V_data_1_ack_out() {
    output_V_data_1_ack_out = output_r_TREADY.read();
}

void GapJunctionIP::thread_output_V_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_V_data_1_sel.read())) {
        output_V_data_1_data_out = output_V_data_1_payload_B.read();
    } else {
        output_V_data_1_data_out = output_V_data_1_payload_A.read();
    }
}

void GapJunctionIP::thread_output_V_data_1_load_A() {
    output_V_data_1_load_A = (output_V_data_1_state_cmp_full.read() & ~output_V_data_1_sel_wr.read());
}

void GapJunctionIP::thread_output_V_data_1_load_B() {
    output_V_data_1_load_B = (output_V_data_1_sel_wr.read() & output_V_data_1_state_cmp_full.read());
}

void GapJunctionIP::thread_output_V_data_1_sel() {
    output_V_data_1_sel = output_V_data_1_sel_rd.read();
}

void GapJunctionIP::thread_output_V_data_1_state_cmp_full() {
    output_V_data_1_state_cmp_full =  (sc_logic) ((!output_V_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_V_data_1_state.read() != ap_const_lv2_1))[0];
}

void GapJunctionIP::thread_output_V_data_1_vld_in() {
    output_V_data_1_vld_in = grp_execute_fu_142_output_r_TVALID.read();
}

void GapJunctionIP::thread_output_V_data_1_vld_out() {
    output_V_data_1_vld_out = output_V_data_1_state.read()[0];
}

void GapJunctionIP::thread_output_V_tlast_V_1_ack_in() {
    output_V_tlast_V_1_ack_in = output_V_tlast_V_1_state.read()[1];
}

void GapJunctionIP::thread_output_V_tlast_V_1_ack_out() {
    output_V_tlast_V_1_ack_out = output_r_TREADY.read();
}

void GapJunctionIP::thread_output_V_tlast_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, output_V_tlast_V_1_sel.read())) {
        output_V_tlast_V_1_data_out = output_V_tlast_V_1_payload_B.read();
    } else {
        output_V_tlast_V_1_data_out = output_V_tlast_V_1_payload_A.read();
    }
}

void GapJunctionIP::thread_output_V_tlast_V_1_load_A() {
    output_V_tlast_V_1_load_A = (output_V_tlast_V_1_state_cmp_full.read() & ~output_V_tlast_V_1_sel_wr.read());
}

void GapJunctionIP::thread_output_V_tlast_V_1_load_B() {
    output_V_tlast_V_1_load_B = (output_V_tlast_V_1_sel_wr.read() & output_V_tlast_V_1_state_cmp_full.read());
}

void GapJunctionIP::thread_output_V_tlast_V_1_sel() {
    output_V_tlast_V_1_sel = output_V_tlast_V_1_sel_rd.read();
}

void GapJunctionIP::thread_output_V_tlast_V_1_state_cmp_full() {
    output_V_tlast_V_1_state_cmp_full =  (sc_logic) ((!output_V_tlast_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(output_V_tlast_V_1_state.read() != ap_const_lv2_1))[0];
}

void GapJunctionIP::thread_output_V_tlast_V_1_vld_in() {
    output_V_tlast_V_1_vld_in = grp_execute_fu_142_output_r_TVALID.read();
}

void GapJunctionIP::thread_output_V_tlast_V_1_vld_out() {
    output_V_tlast_V_1_vld_out = output_V_tlast_V_1_state.read()[0];
}

void GapJunctionIP::thread_output_r_TDATA() {
    output_r_TDATA = output_V_data_1_data_out.read();
}

void GapJunctionIP::thread_output_r_TLAST() {
    output_r_TLAST = output_V_tlast_V_1_data_out.read();
}

void GapJunctionIP::thread_output_r_TVALID() {
    output_r_TVALID = output_V_tlast_V_1_state.read()[0];
}

void GapJunctionIP::thread_p_neg6_fu_247_p2() {
    p_neg6_fu_247_p2 = (!ap_const_lv32_0.is_01() || !tmp_s_fu_233_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_s_fu_233_p2.read()));
}

void GapJunctionIP::thread_p_neg_fu_292_p2() {
    p_neg_fu_292_p2 = (!ap_const_lv32_0.is_01() || !size.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(size.read()));
}

void GapJunctionIP::thread_tmp_10_fu_284_p3() {
    tmp_10_fu_284_p3 = size.read().range(31, 31);
}

void GapJunctionIP::thread_tmp_4_fu_239_p3() {
    tmp_4_fu_239_p3 = tmp_s_fu_233_p2.read().range(31, 31);
}

void GapJunctionIP::thread_tmp_5_fu_273_p2() {
    tmp_5_fu_273_p2 = (!ap_const_lv27_0.is_01() || !tmp_fu_253_p4.read().is_01())? sc_lv<27>(): (sc_biguint<27>(ap_const_lv27_0) - sc_biguint<27>(tmp_fu_253_p4.read()));
}

void GapJunctionIP::thread_tmp_6_fu_263_p4() {
    tmp_6_fu_263_p4 = tmp_s_fu_233_p2.read().range(28, 2);
}

void GapJunctionIP::thread_tmp_7_fu_298_p4() {
    tmp_7_fu_298_p4 = p_neg_fu_292_p2.read().range(28, 2);
}

void GapJunctionIP::thread_tmp_8_fu_308_p2() {
    tmp_8_fu_308_p2 = (!ap_const_lv27_0.is_01() || !tmp_7_fu_298_p4.read().is_01())? sc_lv<27>(): (sc_biguint<27>(ap_const_lv27_0) - sc_biguint<27>(tmp_7_fu_298_p4.read()));
}

void GapJunctionIP::thread_tmp_9_fu_314_p4() {
    tmp_9_fu_314_p4 = size.read().range(28, 2);
}

void GapJunctionIP::thread_tmp_fu_253_p4() {
    tmp_fu_253_p4 = p_neg6_fu_247_p2.read().range(28, 2);
}

void GapJunctionIP::thread_tmp_s_fu_233_p2() {
    tmp_s_fu_233_p2 = (!LastRow.read().is_01() || !FirstRow.read().is_01())? sc_lv<32>(): (sc_biguint<32>(LastRow.read()) - sc_biguint<32>(FirstRow.read()));
}

void GapJunctionIP::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_block_state4_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_logic_0, output_V_data_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, output_V_tlast_V_1_state.read()[0]))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void GapJunctionIP::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_continue\" :  \"" << ap_continue.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_data_TDATA\" :  \"" << input_V_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_data_TVALID\" :  \"" << input_V_data_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_data_TREADY\" :  \"" << input_V_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TDATA\" :  \"" << output_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TVALID\" :  \"" << output_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_r_TREADY\" :  \"" << output_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TLAST\" :  \"" << output_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"size\" :  \"" << size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FirstRow\" :  \"" << FirstRow.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"LastRow\" :  \"" << LastRow.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

