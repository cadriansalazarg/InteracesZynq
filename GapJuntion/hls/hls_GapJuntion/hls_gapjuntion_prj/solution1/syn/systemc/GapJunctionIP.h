// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _GapJunctionIP_HH_
#define _GapJunctionIP_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "execute.h"

namespace ap_rtl {

struct GapJunctionIP : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > input_V_data_TDATA;
    sc_in< sc_logic > input_V_data_TVALID;
    sc_out< sc_logic > input_V_data_TREADY;
    sc_out< sc_lv<32> > output_r_TDATA;
    sc_out< sc_logic > output_r_TVALID;
    sc_in< sc_logic > output_r_TREADY;
    sc_out< sc_lv<1> > output_r_TLAST;
    sc_in< sc_lv<32> > size;
    sc_in< sc_lv<32> > FirstRow;
    sc_in< sc_lv<32> > LastRow;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    GapJunctionIP(sc_module_name name);
    SC_HAS_PROCESS(GapJunctionIP);

    ~GapJunctionIP();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    execute* grp_execute_fu_142;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > input_V_data_0_data_out;
    sc_signal< sc_logic > input_V_data_0_vld_in;
    sc_signal< sc_logic > input_V_data_0_vld_out;
    sc_signal< sc_logic > input_V_data_0_ack_in;
    sc_signal< sc_logic > input_V_data_0_ack_out;
    sc_signal< sc_lv<64> > input_V_data_0_payload_A;
    sc_signal< sc_lv<64> > input_V_data_0_payload_B;
    sc_signal< sc_logic > input_V_data_0_sel_rd;
    sc_signal< sc_logic > input_V_data_0_sel_wr;
    sc_signal< sc_logic > input_V_data_0_sel;
    sc_signal< sc_logic > input_V_data_0_load_A;
    sc_signal< sc_logic > input_V_data_0_load_B;
    sc_signal< sc_lv<2> > input_V_data_0_state;
    sc_signal< sc_logic > input_V_data_0_state_cmp_full;
    sc_signal< sc_lv<32> > output_V_data_1_data_out;
    sc_signal< sc_logic > output_V_data_1_vld_in;
    sc_signal< sc_logic > output_V_data_1_vld_out;
    sc_signal< sc_logic > output_V_data_1_ack_in;
    sc_signal< sc_logic > output_V_data_1_ack_out;
    sc_signal< sc_lv<32> > output_V_data_1_payload_A;
    sc_signal< sc_lv<32> > output_V_data_1_payload_B;
    sc_signal< sc_logic > output_V_data_1_sel_rd;
    sc_signal< sc_logic > output_V_data_1_sel_wr;
    sc_signal< sc_logic > output_V_data_1_sel;
    sc_signal< sc_logic > output_V_data_1_load_A;
    sc_signal< sc_logic > output_V_data_1_load_B;
    sc_signal< sc_lv<2> > output_V_data_1_state;
    sc_signal< sc_logic > output_V_data_1_state_cmp_full;
    sc_signal< sc_lv<1> > output_V_tlast_V_1_data_out;
    sc_signal< sc_logic > output_V_tlast_V_1_vld_in;
    sc_signal< sc_logic > output_V_tlast_V_1_vld_out;
    sc_signal< sc_logic > output_V_tlast_V_1_ack_in;
    sc_signal< sc_logic > output_V_tlast_V_1_ack_out;
    sc_signal< sc_lv<1> > output_V_tlast_V_1_payload_A;
    sc_signal< sc_lv<1> > output_V_tlast_V_1_payload_B;
    sc_signal< sc_logic > output_V_tlast_V_1_sel_rd;
    sc_signal< sc_logic > output_V_tlast_V_1_sel_wr;
    sc_signal< sc_logic > output_V_tlast_V_1_sel;
    sc_signal< sc_logic > output_V_tlast_V_1_load_A;
    sc_signal< sc_logic > output_V_tlast_V_1_load_B;
    sc_signal< sc_lv<2> > output_V_tlast_V_1_state;
    sc_signal< sc_logic > output_V_tlast_V_1_state_cmp_full;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > tmp_4_fu_239_p3;
    sc_signal< sc_lv<27> > tmp_fu_253_p4;
    sc_signal< sc_lv<27> > tmp_6_fu_263_p4;
    sc_signal< sc_lv<1> > tmp_10_fu_284_p3;
    sc_signal< sc_lv<27> > tmp_8_fu_308_p2;
    sc_signal< sc_lv<27> > tmp_9_fu_314_p4;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > grp_execute_fu_142_output_r_TDATA;
    sc_signal< sc_lv<1> > grp_execute_fu_142_output_r_TLAST;
    sc_signal< sc_lv<27> > grp_execute_fu_142_simConfig_rowBegin_V_2;
    sc_signal< sc_lv<27> > grp_execute_fu_142_simConfig_rowEnd_V_r;
    sc_signal< sc_lv<27> > grp_execute_fu_142_simConfig_rowsToSimu;
    sc_signal< sc_lv<27> > grp_execute_fu_142_simConfig_BLOCK_NUMB;
    sc_signal< sc_logic > grp_execute_fu_142_input_V_data_TVALID;
    sc_signal< sc_logic > grp_execute_fu_142_input_V_data_TREADY;
    sc_signal< sc_logic > grp_execute_fu_142_ap_start;
    sc_signal< sc_logic > grp_execute_fu_142_output_r_TVALID;
    sc_signal< sc_logic > grp_execute_fu_142_output_r_TREADY;
    sc_signal< sc_logic > grp_execute_fu_142_ap_done;
    sc_signal< sc_logic > grp_execute_fu_142_ap_ready;
    sc_signal< sc_logic > grp_execute_fu_142_ap_idle;
    sc_signal< sc_logic > grp_execute_fu_142_ap_continue;
    sc_signal< sc_logic > grp_execute_fu_142_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_sync_grp_execute_fu_142_ap_ready;
    sc_signal< sc_logic > ap_sync_grp_execute_fu_142_ap_done;
    sc_signal< bool > ap_block_state4_on_subcall_done;
    sc_signal< sc_logic > ap_sync_reg_grp_execute_fu_142_ap_ready;
    sc_signal< sc_logic > ap_sync_reg_grp_execute_fu_142_ap_done;
    sc_signal< sc_lv<32> > tmp_s_fu_233_p2;
    sc_signal< sc_lv<32> > p_neg6_fu_247_p2;
    sc_signal< sc_lv<27> > tmp_5_fu_273_p2;
    sc_signal< sc_lv<32> > p_neg_fu_292_p2;
    sc_signal< sc_lv<27> > tmp_7_fu_298_p4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<27> ap_const_lv27_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_block_state4_on_subcall_done();
    void thread_ap_block_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_grp_execute_fu_142_ap_done();
    void thread_ap_sync_grp_execute_fu_142_ap_ready();
    void thread_grp_execute_fu_142_ap_continue();
    void thread_grp_execute_fu_142_ap_start();
    void thread_grp_execute_fu_142_input_V_data_TVALID();
    void thread_grp_execute_fu_142_output_r_TREADY();
    void thread_grp_execute_fu_142_simConfig_BLOCK_NUMB();
    void thread_grp_execute_fu_142_simConfig_rowBegin_V_2();
    void thread_grp_execute_fu_142_simConfig_rowEnd_V_r();
    void thread_grp_execute_fu_142_simConfig_rowsToSimu();
    void thread_input_V_data_0_ack_in();
    void thread_input_V_data_0_ack_out();
    void thread_input_V_data_0_data_out();
    void thread_input_V_data_0_load_A();
    void thread_input_V_data_0_load_B();
    void thread_input_V_data_0_sel();
    void thread_input_V_data_0_state_cmp_full();
    void thread_input_V_data_0_vld_in();
    void thread_input_V_data_0_vld_out();
    void thread_input_V_data_TREADY();
    void thread_output_V_data_1_ack_in();
    void thread_output_V_data_1_ack_out();
    void thread_output_V_data_1_data_out();
    void thread_output_V_data_1_load_A();
    void thread_output_V_data_1_load_B();
    void thread_output_V_data_1_sel();
    void thread_output_V_data_1_state_cmp_full();
    void thread_output_V_data_1_vld_in();
    void thread_output_V_data_1_vld_out();
    void thread_output_V_tlast_V_1_ack_in();
    void thread_output_V_tlast_V_1_ack_out();
    void thread_output_V_tlast_V_1_data_out();
    void thread_output_V_tlast_V_1_load_A();
    void thread_output_V_tlast_V_1_load_B();
    void thread_output_V_tlast_V_1_sel();
    void thread_output_V_tlast_V_1_state_cmp_full();
    void thread_output_V_tlast_V_1_vld_in();
    void thread_output_V_tlast_V_1_vld_out();
    void thread_output_r_TDATA();
    void thread_output_r_TLAST();
    void thread_output_r_TVALID();
    void thread_p_neg6_fu_247_p2();
    void thread_p_neg_fu_292_p2();
    void thread_tmp_10_fu_284_p3();
    void thread_tmp_4_fu_239_p3();
    void thread_tmp_5_fu_273_p2();
    void thread_tmp_6_fu_263_p4();
    void thread_tmp_7_fu_298_p4();
    void thread_tmp_8_fu_308_p2();
    void thread_tmp_9_fu_314_p4();
    void thread_tmp_fu_253_p4();
    void thread_tmp_s_fu_233_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
